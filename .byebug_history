c
exception
n
 amount * @product.cost
c
params
amount
 amount * @product.cost
@product
n
params
c
@user.stocker? || @user.admin?
c
@user.stocker?
@user
c
@user
c
deposit === deposit.to_i.to_s
deposit.to_i.to_s
deposit = 'Test'
CoinsToUse.include?(deposit.to_i)
CoinsToUse.include?(deposit)
deposit === deposit.to_i.to_s
n
deposit === deposit.to_i.to_s
c
deposit === deposit.to_i.to_s
deposit
n
deposit
deposit === deposit.to_i.to_s
c
deposit === deposit.to_i.to_s
c
deposit === deposit.to_i.to_s
c
deposit === deposit.to_i.to_s
c
'5'.is_a? Integer
deposit.is_a? Integer
n
c
deposit.kind_of?(Array)
deposit = params[:deposit]
params[:deposit].kind_of(Array)
params[:deposit]
c
authenticate_with_http_token
c
n
c
token
c
params
c
@current_user
c
user
current_user
@current_user
c
current_user
@current_user
c
user
c
user.errors
n
c
user
exception
n
user.errors
user
c
parameters
c
n
c
      end
        end
          break
        else
          change_aux -= 5
          coins << 5
        when !(change_aux - 5).negative?
          change_aux -= 10
          coins << 10
        when !(change_aux - 10).negative?
          change_aux -= 20
          coins << 20
        when !(change_aux - 20).negative?
          change_aux -= 50
          coins << 50
        when !(change_aux - 50).negative?
          change_aux -= 100
          coins << 100
        when !(change_aux - 100).negative?
        case change_aux
      while change_aux.positive?
      end
        end
          break
        else
          change_aux -= 5
          coins << 5
        when !(change_aux - 5).negative?
          change_aux -= 10
          coins << 10
        when !(change_aux - 10).negative?
          change_aux -= 20
          coins << 20
        when !(change_aux - 20).negative?
          change_aux -= 50
          coins << 50
        when !(change_aux - 50).negative?
          change_aux -= 100
          coins << 100
        when !(change_aux - 100).negative?
        case change_aux
      while change_aux.positive?
coins = []
change_aux = change
change.positive?
change = 10
c
multiple[:value]
multiple
c
multiple
c
multiple[:multiple]
multiple.multiple
multiple
multiple.value
c
self.cost
multiple
