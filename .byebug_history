c
response.body
response
n
c
mars.is_updated
mars.amount_available
mars.load
mars
c
change_in_coins = JSON.parse(response.body)
get_change_in_coins(expected_change_value)
expected_change_value = new_deposit - mars.cost
c
ApplicationHelper::c
ApplicationHelper::get_change_in_coins
ApplicationHelper
ApplicationHelper.get_change_in_coins(expected_change_value)
expected_change_value = new_deposit - mars.cost
c
n
new_deposit - mars.cost
expected_change_value
c
new_deposit
mars
response.body
c
response.body
c
mars
response.body
c
JSON.parse(response.body)['user']['id']
JSON.parse(response.body)
c
profile_json
c
user_json
c
users.count
users
c
users.all
c
users.count
users
c
user_path
c
user_path
users_path
user_path
edit_user_url
update_user_url
user_url
c
authenticate(password_from_session)
password_from_session
c
password
c
error_message = JSON.parse(response.body)['errors'][0]['detail']
JSON.parse(response.body)['errors'][0]['detail']
JSON.parse(response.body)['errors']
JSON.parse(response.body)['errors']['detail']
JSON.parse(response.body)['errors']
JSON.parse(response.body)['errors']['details']
response.body
expected_error_message
error_message
c
new_deposit
expected_deposit
c
token
c
JSON.parse(response.body)
token
c
token
c
n
s
mingos
c
response.body
new_deposit
expected_deposit
n
old_deposit
c
response.body
new_deposit
c
JSON.parse(response.body)["user"]["deposit"]
JSON.parse(response.body)["user"]
JSON.parse(response.body)[:user]
JSON.parse(response.body).user
JSON.parse(response.body)
JSON.parse(response.body)[:user]
JSON.parse(response.body)
JSON.parse(response.body)[:deposit]
response.body
new_deposit
old_deposit
c
deposit.to_s.to_i.to_s
deposit.to_i.to_s
deposit.to_i
deposit
deposit === deposit.to_i.to_s
n
params
c
self
authenticate(password)
authenticate(password
password
c
User.find_by_id(params[:id])
User.find(params[:id])
c
exception
n
 amount * @product.cost
c
params
amount
 amount * @product.cost
@product
n
params
c
@user.stocker? || @user.admin?
c
@user.stocker?
@user
c
@user
c
deposit === deposit.to_i.to_s
deposit.to_i.to_s
deposit = 'Test'
CoinsToUse.include?(deposit.to_i)
CoinsToUse.include?(deposit)
deposit === deposit.to_i.to_s
n
deposit === deposit.to_i.to_s
c
deposit === deposit.to_i.to_s
deposit
n
deposit
deposit === deposit.to_i.to_s
c
deposit === deposit.to_i.to_s
c
deposit === deposit.to_i.to_s
c
deposit === deposit.to_i.to_s
c
'5'.is_a? Integer
deposit.is_a? Integer
n
c
deposit.kind_of?(Array)
deposit = params[:deposit]
params[:deposit].kind_of(Array)
params[:deposit]
c
authenticate_with_http_token
c
n
c
token
c
params
c
@current_user
c
user
current_user
@current_user
c
current_user
@current_user
c
user
c
user.errors
n
c
user
exception
n
user.errors
user
c
parameters
c
n
c
      end
        end
          break
        else
          change_aux -= 5
          coins << 5
        when !(change_aux - 5).negative?
          change_aux -= 10
          coins << 10
        when !(change_aux - 10).negative?
          change_aux -= 20
          coins << 20
        when !(change_aux - 20).negative?
          change_aux -= 50
          coins << 50
        when !(change_aux - 50).negative?
          change_aux -= 100
          coins << 100
        when !(change_aux - 100).negative?
        case change_aux
      while change_aux.positive?
      end
        end
          break
        else
          change_aux -= 5
          coins << 5
        when !(change_aux - 5).negative?
          change_aux -= 10
          coins << 10
        when !(change_aux - 10).negative?
          change_aux -= 20
          coins << 20
        when !(change_aux - 20).negative?
          change_aux -= 50
          coins << 50
        when !(change_aux - 50).negative?
          change_aux -= 100
          coins << 100
        when !(change_aux - 100).negative?
        case change_aux
      while change_aux.positive?
coins = []
change_aux = change
change.positive?
change = 10
c
multiple[:value]
multiple
c
multiple
c
multiple[:multiple]
